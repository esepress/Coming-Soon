@import url(https://fonts.googleapis.com/css?family=Quicksand:400,300,700);
body #background {
  position: fixed;
  top: 50%;
  left: 50%;
  min-width: 100%;
  min-height: 100%;
  width: auto;
  height: auto;
  z-index: -100;
  -webkit-transform: translateX(-50%) translateY(-50%);
  transform: translateX(-50%) translateY(-50%);
  background-size: cover;
  overflow: hidden;
  -webkit-filter: blur(5px);
  -moz-filter: blur(5px);
  -o-filter: blur(5px);
  -ms-filter: blur(5px);
  filter: blur(5px);
}
section ul li {
  display: inline-block;
  /*margin-right: 6rem;*/
  width: 17rem;
}
.timenumbers {
  display: block;
  font-size: 3.3rem;
  font-weight: bolder;
  line-height: 4.5rem;
  margin: 0 auto;
  text-align: center;
  color: #fff;
}
/*.main {
	width: 100%;
  max-width: 100%;
  margin: 0 auto;
  min-height: 24px;
  height: 100%;
  position: absolute;
  text-align: center;
  top: 50%;
  -webkit-transform: translateY(-25%);
  transform: translateY(-25%);
}*/
/*.main {
  position: absolute;
  width: 100%;
  height: 100%;
  top: 50%;
  left: 50%;
  margin: 0 auto;
  transform: translate(-50%, -50%);
  background: rgba(0, 0, 0, 0.2);
}*/
.main{
	background-size: cover;
    display: table;
    height: 100vh;
    width: 100%;
    position: relative;
    z-index: 1;
    overflow-x: hidden;
    background: rgba(0, 0, 0, 0.2);
}
/*.content {
  width: 100%;
  max-width: 100%;
  margin: 0 auto;
  min-height: 24px;
  height: 100%;
  position: absolute;
  text-align: center;
  top: 23%;
}*/
.content{
	display: table-cell;
    text-align: center;
    vertical-align: middle;
}
p.timedescription {
  font-size: 1.5rem;
  font-variant: normal;
  line-height: 1.5rem;
  margin: 0 auto;
  text-align: center;
  position: relative;
  top: 0px;
  font-weight: bolder;
  letter-spacing: 0px;
}

.counter {
	padding-top: 20px;
	font-family: 'Quicksand', sans-serif;
}

p {
	color: #E6DBAE;
  	font-family: 'Quicksand', sans-serif;
  	font-size: 1.5rem;
  	letter-spacing: .5rem;
  	text-transform: uppercase;
}
h1 {
	color: #fff;
	font-family: sans-serif;
	font-size: 40px;
}
a.notify-me {
    color: #333;
    padding: 9px 15px;
    font-size: 10px;
    font-weight: bolder;
}

.subscribe p {
    letter-spacing: 0rem !important;
    font-size: 20px !important;
    color: #fff !important;
    font-weight: bolder !important;
}
.subscribe {
    padding-top: 50px;
    padding-bottom: 20px;
}

.subscribe-box {
  padding-top: 5px;
}

.footer {
    position: absolute;
    bottom: 10px;
    
    /*padding-top: 40px;*/
    font-size: 10px;
    letter-spacing: 0px;
}

/*.video {
  background: url(src="https://s3.amazonaws.com/distill-videos/videos/processed/2180/lighthouse.mp4" type="video/mp4");
}*/

.overlay {
    position: absolute;
    width: 100%;
    height: 100%;
    background-color: #1d2437;
    opacity: .4;
}

.bg {
  min-width: 100%;
  min-height: 100%;
  width: auto;
  height: auto;
  position: absolute;
}



/**
 * See: http://www.css-101.org/articles/ken-burns_effect/css-transition.php
 */

/**
 * Styling the container (the wrapper)
 * 
 * position is used to make this box a containing block (it becomes a reference for its absolutely positioned children). overflow will hide part of the images moving outside of the box.
 */

#slideshow {
    position: fixed;
  top: 50%;
  left: 50%;
  min-width: 100%;
  min-height: 100%;
  width: auto;
  height: auto;
  z-index: -100;
  -webkit-transform: translateX(-50%) translateY(-50%);
  transform: translateX(-50%) translateY(-50%);
  background-size: cover;
  overflow: hidden;
  -webkit-filter: blur(5px);
  -moz-filter: blur(5px);
  -o-filter: blur(5px);
  -ms-filter: blur(5px);
  filter: blur(5px);
}

/**
 * Styling the images
 *
 * position:absolute is to put all images in a stack. Dimensions are set to increase the size of these images so their edges do not appear in the parent box when we move them inside the said box.
 * Because the images are now larger than their parent container, we use top, left and margin values to align them in the center of the box.
 * Finally, we set the transition (property and duration). Note that duration values are different for opacity and transform as we want the "fade-in" effect to be faster than the "panning" effect.
 */

#slideshow img {
  background-size: cover;
    position:absolute;
    width:800vh;
    height: 200vh;
    /*height:400px;
    top:50%;
    left:50%;*/
    /*margin-left:-400px;
    margin-top:-200px;*/
    opacity:0;
    -webkit-transition-property: opacity, -webkit-transform;
    -webkit-transition-duration: 3s, 10s;
       -moz-transition-property: opacity, -moz-transform;
       -moz-transition-duration: 3s, 10s;
        -ms-transition-property: opacity, -ms-transform;
        -ms-transition-duration: 3s, 10s;
         -o-transition-property: opacity, -o-transform;
         -o-transition-duration: 3s, 10s;
            transition-property: opacity, transform;
            transition-duration: 3s, 10s;
}

/**
 * We change the point of origin using four corners so images do not move in the same direction. 
 * This technique allows us to create various paths while applying the same translate() values to all images (see the 'fx' class further below).
 */

#slideshow img  {
    -webkit-transform-origin: bottom left;
       -moz-transform-origin: bottom left;
        -ms-transform-origin: bottom left;
         -o-transform-origin: bottom left;
            transform-origin: bottom left;
}

#slideshow :nth-child(2n+1) {
    -webkit-transform-origin: top right;
       -moz-transform-origin: top right;
        -ms-transform-origin: top right;
         -o-transform-origin: top right;
            transform-origin: top right;
}

#slideshow :nth-child(3n+1) {
    -webkit-transform-origin: top left;
       -moz-transform-origin: top left;
        -ms-transform-origin: top left;
         -o-transform-origin: top left;
            transform-origin: top left;
}
#slideshow :nth-child(4n+1) {
  -webkit-transform-origin: bottom right;
     -moz-transform-origin: bottom right;
      -ms-transform-origin: bottom right;
       -o-transform-origin: bottom right;
          transform-origin: bottom right;
}

/**
 * Because of the stacking context, we need to make sure that the first image (in source) is not hidden by the last one. 
 * The rule below moves all images past the second one down the stack. 
 * This is because the second image needs to show on top of the first one when it transitions in.
 */

#slideshow .fx:first-child + img ~ img  {
    z-index:-1;
}

/**
 * Because images are styled with a different point of origin, the following rule will create different panning effects.
 */

#slideshow .fx {
    opacity:1;
    -webkit-transform: scale(1.1);
       -moz-transform: scale(1.1);
        -ms-transform: scale(1.1);
         -o-transform: scale(1.1);
            transform: scale(1.1);
}